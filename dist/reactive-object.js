var i=class{effects;constructor(n,r){let e=this;this.effects={options:r||{},getEffects:{},setEffects:{}};let s={get(f,t,c){if(f!=e){if(t===e.registerEffect.name)return function(){return e.registerEffect.apply(e,arguments)};if(t===e.removeEffect.name)return function(){return e.removeEffect.apply(e,arguments)};if(typeof f[t]=="object"&&f[t]!==null)return f._isProxy?f[t]:(f._isProxy=!0,new Proxy(f[t],s));for(let o in e.effects.getEffects)e.effects.getEffects[o].apply(e,[{key:t}]);return f[t]}},set(f,t,c){if(f[t]===c&&!e.effects.options.all)return!0;if(t===Object.getPrototypeOf(e.effects).name)return!1;let o=f[t];if(f[t]=c,t!=="_isProxy"&&t!==e.registerEffect.name&&t!==e.removeEffect.name)for(let a in e.effects.setEffects)e.effects.setEffects[a].apply(e,[{key:t,value:c,old:o}]);return!0}};return new Proxy(n,s)}registerEffect(n,r){let e=r==="get"?this.effects.getEffects:this.effects.setEffects,s;do s=Math.random().toString(16).substring(2,15);while(e[s]);return e[s]=n,s}removeEffect(n,r){let e=r==="get"?this.effects.getEffects:this.effects.setEffects;delete e[n]}};export{i as ReactiveObject};
